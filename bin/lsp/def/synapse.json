{
    "isnetworkowner": "Returns true if your client is a network owner of `part`.",
    "iswindowactive": "Returns true if the game window is in focus.",
    "lockwindow": "Focuses and locks the game window. While locked, focus changes and input by the user are not seen by the game. Input can still be sent with the input API.",
    "unlockwindow": "Unlocks the game window.",
    "iswindowlocked": "Returns true if the game window is locked.",
    "keypress": "Simulates a key press for the specified KeyCode.",
    "keyrelease": "Simulates a key press for the specified KeyCode.",
    "keyclick": "Simulates an instant key press + release for the specified KeyCode.",
    "mouse1press": "Simulates a left mouse button press at the specified coordinates.",
    "mouse1release": "Simulates a left mouse button release at the specified coordinates.",
    "mouse1click": "Simulates a left mouse click at the current mouse position.",
    "mouse2press": "Simulates a right mouse button press at the specified coordinates.",
    "mouse2release": "Simulates a right mouse button release at the specified coordinates.",
    "mouse2click": "Simulates a right mouse click at the current mouse position.",
    "mousescroll": "Simulates a scroll forward or backward at the specified coordinates.",
    "mousemoverel": "Moves the mouse relative to its current position. If provided, `internal` specifies whether a mouse movement event is signalled internally or your physical mouse cursor is moved.\nIf not provided, `internal` is implied to be true if the game window is locked OR not active and false if otherwise.\nA physical mouse movement cannot occur when the game window is not in focus.\n",
    "mousemoveabs": "Moves the mouse to the specified coordinates. If provided, `internal` specifies whether a mouse movement event is signalled internally or your physical mouse cursor is moved.\nIf not provided, `internal` is implied to be true if the game window is locked OR not active and false if otherwise.\nA physical mouse movement cannot occur when the game window is not in focus.\n",
    "iskeydown": "Returns true if the specified [virtual-key code](https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes) is pressed and the game window is in focus and not locked.",
    "iskeytoggled": "Returns true if the specified [virtual-key code](https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes) is toggled (e.g. caps lock) and the game window is in focus and not locked.",
    "getmousestate": "Returns true if the internal UI cursor is enabled.",
    "setmousestate": "Enables or disables the internal UI cursor.",
    "getgenv": "Returns Synapse's global environment table.",
    "getrenv": "Returns the game's global environment table.",
    "getreg": "Returns a read-only copy of the Lua [registry](http://www.lua.org/manual/5.1/manual.html#3.5).",
    "getgc": "Returns a weak table of all Lua objects referenced by the garbage collector. By default, tables are not included.",
    "filtergc": "Searches for values currently referenced by Lua that match the given criteria. `type` can either be 'function' or 'table'.\nSetting `return_one` indicates that this function should return the first result, or nil if there are no matches.\nThe following options can be used:\n\n**Table**:\n\n| Key | Description | Default |\n|---|---|---|\n| Keys | If not empty, only include tables with keys corresponding to all values in this table | nil |\n| Values | If not empty, only include tables with values corresponding to all values in this table | nil |\n| KeyValuePairs | If not empty, only include tables with keys/value pairs corresponding to all values in this table | nil |\n| Metatable | If not empty, only include tables with the metatable passed | nil |\n\n**Function**:\n\n| Key | Description | Default |\n|---|---|---|\n| Name | If not empty, only include functions with this name | nil |\n| Constants | If not empty, only include functions with constants that match all values in this table | nil |\n| Upvalues | If not empty, only include functions with upvalues that match all values in this table | nil |\n| IgnoreSyn | If false, do not ignore Synapse functions. | true |\n\n**NOTE**: values are compared using **bit-for-bit equality checks**. This means that NaN == NaN and -0 ~= 0. This allows you to specify NaN or -0 as a value you want to search for.\n\n**Examples**:\n```lua\n    local empty_table = {\n        good = false\n    }\n\n    local my_table = {\n        good = true,\n        one = \"two\",\n        three = \"four\",\n        five = \"six\",\n        v1 = \"value one\",\n    }\n\n    local my_other_table = {\n        good = true,\n        one = \"not two\",\n        three = \"not four\",\n        five = \"six\",\n        v1 = \"value one\",\n    }\n\n    -- intentionally does not match KeyValuePair, so table should not be found\n    local my_bad_table = {\n        good = false,\n        one = \"not two\",\n        three = \"not four\",\n        v1 = \"value one\",\n        five = \"not six\",\n    }\n\n    for _, v in next, filtergc('table', {\n        Keys = { \"one\", \"three\" },\n        Values = { \"value one\" },\n        KeyValuePairs = {\n            five = \"six\"\n        }\n    }) do\n        assert(v.good)\n        warn(v)\n    end\n```\n```lua\n    local uv = \"bbbbb\"\n    local function myfunc()\n        return \"aaaaa\" .. uv\n    end\n\n    print(filtergc('function', {\n        IgnoreSyn = false,\n        Name = \"myfunc\"\n    }, true)\n\n    print(filtergc('function', {\n        IgnoreSyn = false,\n        Constants = { \"aaaaa\" }\n    }, true)\n\n    print(filtergc('function', {\n        IgnoreSyn = false,\n        Upvalues = { \"bbbbb\" }\n    }, true)\n```\n",
    "getinstances": "Returns a list of all instances referenced by Lua (core script references are not included).",
    "getnilinstances": "Returns a list of all nil-parented instances referenced by Lua (core script references are not included).",
    "getscripts": "Returns a list of all loaded scripts.",
    "getloadedmodules": "Returns a list of all loaded `ModuleScript`s.",
    "fireclickdetector": "Emulates clicking a `ClickDetector`.",
    "fireproximityprompt": "Emulates triggering a `ProximityPrompt`.",
    "firetouchinterest": "Emulates a `Touched` event on `to_touch` with `part`.",
    "getrawmetatable": "Returns an object's metatable, ignoring the `__metatable` metamethod.",
    "setrawmetatable": "Sets an object's metatable, ignoring the `__metatable` metamethod.",
    "setreadonly": "Sets a table's read-only flag.",
    "setuntouched": "Sets a Lua environment's untouched flag. This flag is relevant to certain Luau optimizations, namely built-ins.\nIf true, \"built-in\" globals such as `game` or `print` are fetched from a cache and cannot be modified.\nIf false, the cache is disabled and built-ins are fetched from the environment table as normal.\nFunctions `getfenv` and `setfenv` set this flag to false implicitly.\n\nExample:\n```lua\nlocal env = getfenv() -- untouched implicity set to false\nlocal old_print = print\nenv.print = function() old_print(\"overwritten!\") end\nprint(\"hello\")\nsetuntouched(env, true)\nprint(\"hello\")\n```\nOutput:\n```\noverwritten!\nhello\n```\n",
    "isuntouched": "Returns a table's untouched flag.",
    "makewritable": "Equivalent to `setreadonly(table, false)`.",
    "makereadonly": "Equivalent to `setreadonly(table, true)`.",
    "isreadonly": "Returns a table's read-only flag.",
    "setclipboard": "Copies a string or Instance or table of Instances to the clipboard. Returns true on success.",
    "setfflag": "Sets FFlag `fflag` to `value`. Returns false if the flag doesn't exist or couldn't be set.",
    "identifyexecutor": "Returns \"Synapse X\" and version string.",
    "unlockmodulescript": "\"Unlocks\" `module` such that code running at different contexts (e.g. level 2 vs level 7) return the same values when required.",
    "require": "This function replaces the game's `require` to allow for requiring game modules from higher contexts of script execution, like the one in which Synapse scripts run.",
    "messagebox": "A wrapper around Microsoft's [MessageBoxA](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa).",
    "setwindowtitle": "Sets the title of the game window. A wrapper around Microsoft's [SetWindowTextA](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtexta).",
    "setwindowicon": "Sets the icon of the game window.",
    "gethui": "Returns a protected container where GUIs can be hidden from detection by the game.",
    "createuitab": "Creates a tab in the external UI",
    "newtable": "Creates a table with the specified array and hash sizes, then fills with random data.\nRandom data for hash part has random vector keys with X, Y, and Z values between 0 and 1 and `false` as a value. Random data for array part has `false` as a value.\nThis function is useful for creating tables with memory hidden to scripts. If you would like this feature, make sure `narray` is >= 33 and `nhash` is >= 17.\nNOTE: To prevent table reallocation from exposing this memory, make sure you don't have fewer array/hash values!\n",
    "cloneref": "Clones a reference to an Instance. The Lua expression `clone == instance` will be false, but both values will point to the same Instance.\n",
    "rconsoletop": "Enables or disables the internal console window being topmost.",
    "rconsoleprint": "Writes text to the internal console. If `async` is true, the function does not block (useful when printing large amounts of text). If `escape` is false, null terminators will not be escaped. Defaults to true.",
    "rconsoleinfo": "Writes info text to the internal console. If `async` is true, the function does not block (useful when printing large amounts of text).",
    "rconsolewarn": "Writes warning text to the internal console. If `async` is true, the function does not block (useful when printing large amounts of text).",
    "rconsoleerr": "Writes error text to the internal console. If `async` is true, the function does not block (useful when printing large amounts of text).",
    "rconsoleclear": "Clears the internal console.",
    "rconsolename": "Sets the title of the internal console's window.",
    "rconsoleinput": "Waits for a line of user input from the internal console and returns the result. Truncated to 4096 characters.",
    "printconsole": "Prints colored text to the Synapse console.",
    "clearconsole": "Clears the internal and external consoles.",
    "loadstring": "Equivalent to Lua 5.1's [loadstring](http://www.lua.org/manual/5.1/manual.html#pdf-loadstring).",
    "checkcaller": "Returns true if the current thread is owned by Synapse.",
    "checkcallstack": "Returns true if the current thread is owned by Synapse AND _all_ functions at or above `level` in the call stack are Synapse functions.\nA level of `1` represents the function calling checkcallstack, `2` represents the function calling the function calling checkcallstack, and so forth.\n",
    "issynapsefunction": "Returns true if `f` is a Synapse function.",
    "islclosure": "Returns true if `f` is a Lua function (as opposed to a C function).",
    "decompile": "Decompiles `target` asynchronously. `target` cannot be a Synapse function.",
    "getscriptthread": "Returns the main Lua thread associated with `script`. Note that this may not be the only thread used!",
    "getsenv": "Returns the Lua environment (such as that returned by `getfenv`) associated with the main function of `script`.\nEssentially equivalent to getfenv(getscriptfunction(script)).\n\n**WARNING**: Scripts may add a metatable to this value and check who's accessing it! If you want to get around this, check for whether the environment has a metatable and use `syn.trampoline_call` accordingly.\n",
    "getscriptfunction": "Returns the main function associated with `script`.",
    "getscripthash": "Returns a script's bytecode hash.",
    "getfunctionhash": "Returns a Lua function's bytecode hash.",
    "getscriptname": "Returns the name of a script when it was first loaded.",
    "getscriptbytecode": "Returns `target`'s bytecode. `target` cannot be a Synapse function.",
    "getcallingscript": "Returns the script associated with the current thread or nil.",
    "issynapsethread": "Returns true if `thread` is owned by Synapse.",
    "getboundingbox": "Calculates the bounding box of a list of parts and returns its position (as a CFrame, optionally transformed by `orientation`) and size.\n",
    "worldtoscreen": "Performs world to screen calculations on every `Vector3` or `BasePart` in `points` and returns the result as a table with matching keys. `offset` can be provided to offset every position.\n",
    "setcliprect": "Defines or undefines the draw area (clip rectangle) for the given z-index.",
    "setfpscap": "Sets the render FPS cap. Note: Minimum FPS is 1, maximum FPS is 16384\n",
    "getconnections": "Returns a script signal's connections.\nNOTE: Some events, such as `UserInputService`'s `InputBegan`, actually consist of different signals internally for different security contexts. By default,\n`getconnections` returns the connections of all signals.\n",
    "firesignal": "Fires a signal, engine connections included.\n",
    "replicatesignal": "Fires a signal on the server. Signal must be [replicable](#cansignalreplicate).\n",
    "cansignalreplicate": "Returns true if a signal can be replicated to the server (see [replicatesignal](#replicatesignal)).\n",
    "getsignalarguments": "Returns a table of a signal's arguments' types. For example, passing `Instance.AncestryChanged` would return `{ \"Instance\", \"Instance \"}`.\n",
    "isconnectionenabled": "Returns true if a connection is enabled.\n",
    "setconnectionenabled": "Enables or disables a connection. Disabled connections remain connected, but do nothing when fired.\n",
    "isluaconnection": "Returns true if `connection` represents a Lua connection.\n",
    "iswaitingconnection": "Returns true if `connection` is the result of a `:Wait()` call.\n",
    "getconnectionfunction": "Returns a connection's associated function. The connection must be a non-waiting Lua connection.\n\n   **NOTE**: Arbitrary values can be passed to `:Connect`.\n   In order to prevent accidental mishaps, this function will, by default, filter out any connected value that is not a function or a table with a `__call` metamethod.\nIf `:Connect` was passed table with a `__call` metamethod, the returned value will be the value of that metamethod, or nil if that value is not a function.\n\nThe optional second parameter will disable this behavior, and will just return whatever was passed to :Connect.\n",
    "getconnectionthread": "Returns a connection's associated thread. The connection must be a Lua connection.\n",
    "isgamescriptconnection": "Returns true if `connection` represents a Lua connection created by game scripts (as opposed to core scripts).\n",
    "readfile": "Reads a file from the workspace folder.",
    "readfileasync": "Reads a file from the workspace folder asynchronously.",
    "writefile": "Writes to a file in the workspace folder.",
    "writefileasync": "Writes to a file in the workspace folder asynchronously.",
    "appendfile": "Appends to a file in the workspace folder.",
    "appendfileasync": "Appends to a file in the workspace folder asynchronously.",
    "loadfile": "Equivalent to `loadstring(readfile(path))`.",
    "listfiles": "Returns an array of file names belonging to `folder`.",
    "isfile": "Returns true if `path` refers to a file.",
    "isfolder": "Returns true if `path` refers to a folder.",
    "makefolder": "Recursively creates directories. Returns true on success.",
    "delfolder": "Deletes a folder.",
    "delfile": "Deletes a file.",
    "getsynasset": "Returns a `Content` string that can be used with GUI elements, sounds, meshes, and etc. to refer to an asset in the workspace folder. \n**Note:** Certain assets only work with certain file types. For example, `VideoFrame`s only work with .webm encoded videos.\n",
    "saveinstance": "Saves an instance in binary (.rbxl or .rbxm) format. The following options can be passed:\n\n| Option                 | Description                                                                              | Default                                                                                 |\n|------------------------|------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|\n| FileName               | Output file                                                                              | Varies                                                                                  |\n| IgnoreArchivable       | Ignores the `Archivable` property                                                        | false                                                                                   |\n| SavePlayerCharacters      | Includes player characters                                                               | false                                                                                   |\n| SavePlayers            | Includes `Player` objects and their descendants                                          | false                                                                                   |\n| DisableCompression     | Disables compression in the binary output                                                | false                                                                                   |\n| Decompile              | Starts a [batch decompiler job](#todo) for all relevant scripts and includes the results | false                                                                                   |\n| DecompileJobless       | Includes already decompiled code in the output. No new scripts are decompiled.           | false                                                                                   |\n| SaveNonCreatable       | Includes non-creatable instances as `Folder` objects                                     | false                                                                                   |\n| NilInstances           | Includes nil instances                                                                   | false                                                                                   |\n| CopyToClipboard        | If true, copies the result to clipboard instead of writing to disk                       | false                                                                                   |\n| IgnoreList             | A list of instances (and their descendants) to ignore                                    | {}                                                                                      |\n\nIf the `Decompile` option is enabled, `saveinstance` returns true when the job completes successfully or false if cancelled by the user.\n",
    "saveplace": "Equivalent to `saveinstance(game, options)`.\n",
    "setstackhidden": "Hides or unhides a function from the callstack.",
    "newcclosure": "Creates a C wrapper around `closure` with function name `name` if provided.",
    "clonefunction": "Clones a function. Note that if the function passed is a C closure, `is_synapse_function` will return `true` on the returned closure.",
    "hookfunction": "Hooks a Lua or C function in-place. Returns a copy of the original function. Can optionally specify a filter to use.",
    "hookproto": "TODO",
    "hookmetamethod": "TODO",
    "restorefunction": "Un-hooks a function hooked with [hookfunction](#hookfunction). NOTE: can only restore *one* level of a C function hook. Attempting to restore a C function that has been hooked twice will error.\n",
    "restoreproto": "TODO",
    "hooksignal": "Enables the interception of signal invocations. When `signal` is fired, `callback` is called for every _Lua_ connection in `signal` with an info table and the invocation arguments. Returning true from this callback fires the original connection.\n`hooksignal` cannot be used to intercept C (engine) connections or Lua connections belonging to CoreScripts.\n\n**Example code:**\n```lua\nlocal part = Instance.new(\"Part\")\npart.Changed:Connect(function(prop)\n    print(prop .. \" changed?\")\nend)\nhooksignal(part.Changed, function(info, prop)\n    print(info.Connection) -- the connection object.\n    print(info.Function) -- the original function. Not available for waiting connections.\n    print(info.Index) -- the position of this connection in part.Changed at the time this callback is executed. Not available for waiting connections.\n    print(prop)\n    return true, \"Hooked\"\nend)\npart.Name = \"NewName\"\n```\n**Output:**\n```\nConnection\nfunction: <etc>\n0\nName\nHooked changed?\n```\n",
    "unhooksignal": "Unhooks a signal hooked with [hooksignal](#hooksignal).\n",
    "issignalhooked": "Returns true if `signal` is hooked.\n",
    "setscriptable": "Sets a property's `scriptable` flag. Non-scriptable properties cannot be accessed from Lua. Returns the flag's original state.\nNOTE: Take care using this function as changes done also affect game scripts, introducing the possibility of creating detection vectors or breaking existing code.\n",
    "gethiddenproperty": "Safely reads a non-scriptable property value, including those of type `BinaryString` and `SharedString`.",
    "sethiddenproperty": "Safely sets a non-scriptable property value.",
    "getproperties": "Returns a dictionary of all property values, including any non-scriptable, for `instance`.",
    "gethiddenproperties": "Returns a dictionary of all non-scriptable property values for `instance`.",
    "getpcdprop": "Returns a `TriangleMeshPart`'s `PhysicalConfigData` property.",
    "getcallbackmember": "Returns the value of a callback property, such as `RemoteFunction.OnClientInvoke`.",
    "geteventmember": "Creates an unrestricted signal object for any event in `instance`. Useful for connecting to conventionally non-scriptable signals.",
    "getrendersteppedlist": "Returns all callbacks bound with `RunService:BindToRenderStep`.\n",
    "syn.queue_on_teleport": "Queues `script` to be executed after the next teleport.",
    "syn.clear_teleport_queue": "Removes all queued scripts from the teleport queue.",
    "syn.get_thread_identity": "Returns the current thread's context level.",
    "syn.set_thread_identity": "Sets the current thread's context level.",
    "syn.protect_gui": "`protect_gui` is deprecated. For backwards compatability, this function will cause `target` to be parented the return value of `gethui()` the next time it is parented.\n",
    "syn.unprotect_gui": "`unprotect_gui` is deprecated. For backwards compatability, this function will disable the parent-redirection done by `protect_gui`.\n",
    "syn.trampoline_call": "Proxy a call to a Lua function with the given call stack and thread options. `call_stack` is an array of tables, with each sub-table having fields described below.\n\n**Note:** These values do *not* need to correlate with actual information returned by debug.getinfo; they are fully customizable.\n\n**Note:** The `func` parameter will override all other data you pass here aside from `currentline`!\n\n| __Call Stack Entry__ |              __Description__                       |\n| ---------------------| ---------------------------------------------------|\n| currentline          | The currently executing line of code.              |\n| env                  | The function's environment.                        |\n| source               | The 'source' field returned by `debug.getinfo`.    |\n| name                 | The function's name.                               |\n| numparams            | The number of parameters in the function.          |\n| is_vararg            | Whether this function takes variadic arguments.    |\n| func                 | A function to copy all information from.           |\n\n| __Thread Option Entry__   |              __Description__              |\n| --------------------------| ------------------------------------------|\n| script                    | The script attached to the thread.        |\n| identity                  | The identity of the new state.            |\n| env                       | The global environment of the new thread. |\n| thread                    | A thread used as the parent.              |\n",
    "syn.toast_notification": "Displays a toast notification in the internal UI. The options table follows the following format:\n\n| Option                 | Description                            | Default                  |\n|------------------------|----------------------------------------|--------------------------|\n| Type | [ToastType](#TODO) enum | Required |\n| Duration | How long the notification should last, in seconds | 5 |\n| Title | The notification's title | Required |\n| Content | The notification's content | Required |\n| IconColor | Overrides the icon color | Varies by `Type` |\n",
    "syn.request": "Makes a RESTful HTTP request.\n\n#### Request Options\n\n| Option                 | Description                            | Default                  |\n|------------------------|----------------------------------------|--------------------------|\n| Url | The request URL | Required |\n| Method | The request method | \"GET\" |\n| Headers | A map of header names to header values | {} |\n| Cookies | A map of cookie names to cookie values | {} |\n| Body | The request body. Cannot be used with GET or HEAD requests. It might be necessary to specify the `Content-Type` header when sending JSON or other formats. | nil |\n\n#### Synapse Headers\nIn addition to headers provided by the user, Synapse X adds the following:\n\n_Note:_ `Syn-Fingerprint` and `Syn-User-Identifier` have been deprecated in favor of the new public key verification system shown below.\n\n| Header              | Value                               | Can Override |\n|---------------------|-------------------------------------|--------------|\n| UserAgent | A string in the format \"sx/<build_hash>\". | Yes |\n| Syn-Signature | Public-key authenticated headers, base64-encoded. See below for use. | No |\n| Syn-Fingerprint | A string value which uniquely identifies the computer running Synapse X. | No |\n| Syn-User-Identifier | A string value which uniquely identifies the current Synapse X user. | No |\n\n#### Response Table\n`syn.request` returns the following table once the request is complete:\n\n| Key                 | Description                         |\n|---------------------|-------------------------------------|\n| Success | Whether the request succeeded |\n| StatusCode | The HTTP status code of the response |\n| StatusMessage | A human-readable version of `StatusCode` |\n| Headers | The response headers |\n| Cookies | The response cookies |\n| Body | The response body |\n\n#### Public Key Verification\nServers can verify a request was made by Synapse X via the public key verification system, along with `syn.crypt.user.sign` to verify extra data sent to the server.\n\nTo verify a `Syn-Signature` header, you must use [libsodium](https://libsodium.gitbook.io/doc/) with the [crypto_sign_open](https://libsodium.gitbook.io/doc/) function. Pass `qgq26x4+4FWdLzRpGZytZfEQJlOeusryQC8ppC2BEVA=` (Base64 encoded) as the public key. We will always alert developers and users if this key ever changes.\n\nAfter signature verification succeeds, you will get a JSON encoded payload with the following fields:\n\n| Field               | Description                                                                                                                                                     |\n|---------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| authenticationTime | UNIX timestamp when the user authenticated this instance (UTC). |\n| fingerprint | Same as the `Syn-Fingerprint` legacy header. |\n| ipAddress | The IP address that was used to authenticate this instance. Please note this can change if the user was using a mobile network/similar. Can be IPv4 or IPv6. |\n| userIdentifier | Same as the `Syn-User-Identifier` legacy header. |\n| userPublicKey | The Base64 encoded public key for this user. You can use this to verify messages that were signed with the `syn.crypt.user.sign` function. To verify messages, use the libsodium [crypto_sign_verify_detached](https://libsodium.gitbook.io/doc/public-key_cryptography/public-key_signatures#detached-mode) function with this key as the public key. |\n| userPromptPublicKey | The Base64 encoded prompt public key for this user. Like the above public key, this can be used to verify messages that were signed with the `syn.crypt.user.prompt.sign` function. |\n\nPlease note that *new* fields can be added to this JSON payload at any time, so don't rely on the above for your JSON schemas. We will never remove fields without first alerting developers, though.\n\ntodo: add NodeJS, PHP, ASP.NET example code and probably move this whole section (Public Key Verification) to a page in the Developer Guide\n",
    "syn.crypt.encrypt": "Encrypts `data` with `key`, and includes `additional_data` if it is passed.\n\n(Uses libsodium [secretbox](https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox) for when `additional_data` isn't passed, and [the AEAD form of the same algorithm](https://libsodium.gitbook.io/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction) if it is passed. Nonce is generated and appended before the encrypted message.)\n",
    "syn.crypt.decrypt": "Decrypts `ciphertext` with `key`. The data (along with `additional_data` if it is passed) is also authenticated via a MAC before being returned.\n\n(Uses libsodium [secretbox](https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox) or [the AEAD form](https://libsodium.gitbook.io/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction) if `additional_data` is passed, like above.)\n",
    "syn.crypt.hash": "Hashes `data` with Blake2B. Optionally, you can pass `key` to create a 'keyed' hash, for which the hash will never be the same for different keys.\n\n(Uses libsodium [generic hashing](https://libsodium.gitbook.io/doc/hashing/generic_hashing).)\n",
    "syn.crypt.hmac": "Creates a HMAC signature from `data` and `key`. Note this is not the same as passing a `key` to the above function, and uses a different algorithm.\n\n(Uses libsodium [authentication](https://libsodium.gitbook.io/doc/secret-key_cryptography/secret-key_authentication).)\n",
    "syn.crypt.random": "Generates a random string with `size` (cannot be negative or exceed 1024).\n",
    "syn.crypt.base64.encode": "Base64 encodes `input`.        \n",
    "syn.crypt.base64.decode": "Base64 decodes `input`.        \n",
    "syn.crypt.hex.encode": "Encodes `input` in hexadecimal.\n",
    "syn.crypt.hex.decode": "Decodes `input` in hexadecimal.\n",
    "syn.crypt.lz4.compress": "Compresses `data` with LZ4.\n",
    "syn.crypt.derive.key": "Derives a cryptographic key from another `key` specified - `len` specifies the length of the generated key, `sub_key_id` is the index of the key to generate, and `context` is a 8-byte string that uniquely identifies the script that is generating this key.\n\nThe `context` string can be any 8 ASCII characters. Some examples are `SynapseX`, `MyScript`, and `_Script_`.\n\n*Note*: Due to Lua's usage of 64 bit floating point numbers, the maximum safe integer to pass to `sub_key_id` is 2^52. Passing a larger number will result in undefined behavior.\n\n(Uses libsodium [key derivation](https://libsodium.gitbook.io/doc/key_derivation).)\n",
    "syn.crypt.derive.password": "Derives a cryptographic key from a user-entered `password`. Due to passwords usually being low-complexity and easy to crack, this function uses a *password hashing function* to achieve its goals.\n\nIn order to use this function, you must pass a 16-byte `salt`. You can generate this via `syn.crypt.random`.\n\nPassword hashing functions are deliberately slow - this is to make bruteforce attacks harder. The `mode` (or `opslimit`/`memlimit`) parameter allows you to specify how much security you want your derived key to have. You should choose the mode you wish to use based on how acceptable the wait for function completion is for your application, and what the security requirements for your application are.\n\n***Warning***: Using the higher security PasswordDerivationMode options (or a `memlimit` parameter higher then 512MiB) with more then one password hash being processed at once can cause crashes due to high-memory requirements for the hash function.\n\n(Uses libsodium [password hashing](https://libsodium.gitbook.io/doc/password_hashing/default_phf).)\n\n### PasswordDerivationMode\n| __Mode__ | __Note__\n|----------|-----------|\n| `Interactive` | The password hash takes ~100 milliseconds to complete on a modern PC.\n| `Moderate` | The password hash takes ~1 second to complete on a modern PC.\n| `Sensitive` | The password hash takes ~5 seconds to complete on a modern PC. Please note the warning above, as it particularly affects this.\n",
    "syn.crypt.user.encrypt": "Encrypts `data` in a way that only the caller's Synapse X account can decrypt it. You can also pass a `key` to add a secondary key to the encryption if you wish.\n\n*Note*: If the user resets their Synapse X password, **the output of this function will not be decryptable anymore**. The user simply changing their password when they know their current one will **not** cause this to happen, however.\n\nThe `mode` parameter controls how the encryption works.\n\n### UserEncryptionMode\n| __Mode__ | __Note__\n|---------|-----------|\n| `SynAccount` | Ties the encrypted data to the users Synapse X account. The data **is** decryptable on other machines if the pre-conditions stated above are met.\n| `WindowsAccount` | Ties the encrypted data to *both* the users Synapse X account and Windows account. The data is *only* decryptable if both the pre-conditions stated above are met and the user does not reset their Windows password.\n| `WindowsMachine` | Ties the encrypted data to *both* the users Synapse X account and Windows machine. The data is *only* decryptable if both the pre-conditions stated above are met and the user does not reset their Windows PC.\n",
    "syn.crypt.user.decrypt": "Decrypts `ciphertext` from the *Per-User Encrypt* function above. You do not need to pass the `UserEncryptionMode` you used to encrypt this data, but you need to pass the `key` you used to encrypt the data if one was specified. The function will error if decryption fails.\n",
    "syn.crypt.user.sign": "Signs `data` in a way that only the caller's Synapse X account can produce this signature. Equivalent to `syn.crypt.sign.detached.create` with a user-unique key.\n\nYou can verify data was signed with this method from a web request. See [the HTTP APIs](../category/http.md) for more information.\n",
    "syn.crypt.user.verify": "Verifies `data` was signed by the `syn.crypt.user.sign` function from the caller's Synapse X account. If you want to verify data signed by another user, get their public key from [the HTTP APIs](../category/http.md).\n",
    "syn.crypt.user.prompt.encrypt": "Prompt equivalent to [syn.crypt.user.encrypt](syn.crypt.user.html#encrypt).\n",
    "syn.crypt.user.prompt.decrypt": "Prompt equivalent to [syn.crypt.user.decrypt](syn.crypt.user.html#decrypt)\n",
    "syn.crypt.user.prompt.sign": "Prompt equivalent to [syn.crypt.user.sign](syn.crypt.user.html#sign).\n",
    "syn.crypt.user.prompt.verify": "Prompt equivalent to [syn.crypt.user.verify](syn.crypt.user.html#verify).\n",
    "syn.crypt.seal.keygen": "Generates a new public & secret keypair, and returns it in that order.\n",
    "syn.crypt.seal.derive": "TODO\n",
    "syn.crypt.seal.encrypt": "Encrypts `data` with the `public_key`. The data can only be later decrypted via the secret key in the keypair.\n",
    "syn.crypt.seal.decrypt": "Decrypts `data` with the `public_key` and `secret_key`.\n",
    "syn.crypt.sign.keygen": "Generates a new public & secret keypair, and returns it in that order.\n\n**NOTE**: These keypairs are *NOT* compatible with the ones used for the encryption library above.\n",
    "syn.crypt.sign.derive": "TODO\n",
    "syn.crypt.sign.create": "Creates a signature for `data` with the `secret_key`, and returns the signature combined with the message.\n",
    "syn.crypt.sign.open": "Verifies the `data` passed in with the `public_key`, and returns the original message if the verification succeeds. Errors if verification fails.\n",
    "syn.crypt.sign.detached.create": "Creates a signature for `data` with the `secret_key`, and returns the signature.\n",
    "syn.crypt.sign.detached.verify": "Verifies the `data` passed in with the `public_key` and `signature`, and returns `true` if the verification succeeds. Returns `false` if verification fails.\n",
    "syn.crypt.custom.encrypt": "Encrypts `data` with `key` using selected `cipher` and `iv/nonce`.\n",
    "syn.crypt.custom.decrypt": "Decrypts `ciphertext` with `key` using selected `cipher` and `iv/nonce`.\n",
    "syn.crypt.custom.hash": "Hashes `data` with `algorithm`.\n\n### Custom Hashing Algorithms\n\n| __MD5__ | __SHA1__ | __SHA2__ | __SHA3__ | __BLAKE__  |\n|---------|----------|----------|----------|------------|\n|   md5   |   sha1   |  sha224  | sha3-224 | blake2b    |\n|         |          |  sha256  | sha3-256 | blake2s    |\n|         |          |  sha384  | sha3-384 |\n|         |          |  sha512  | sha3-512 |\n",
    "syn.crypt.custom.hmac": "Creates a HMAC signature from `data` and `key` with `algorithm`.\n\n### Custom HMAC Algorithms\n\n| __MD5__ | __SHA1__ | __SHA2__ | __SHA3__ |\n|---------|----------|----------|----------|\n|   md5   |   sha1   |  sha256  | sha3-224 |\n|         |          |  sha384  | sha3-256 |\n|         |          |  sha512  | sha3-384 |\n|         |          |          | sha3-512 |\n",
    "syn.oth.hook": "A secure version of `hookfunction` for C functions that works by running hook code on separate threads. When a hooked function is called,\na new or cached hook thread is resumed with the `hook` and any passed arguments. The returned callback can be used to execute the original function on the original, calling thread.\n\nIn the context of a hook thread, the following functions behave as though being called under the original thread:\n\n - getnamecallmethod\n - setnamecallmethod\n - checkcaller\n - checkcallstack\n - TODO\n",
    "syn.oth.unhook": "Un-hooks a function hooked with `syn.oth.hook`. The second parameter is not required if the function has only been hooked once. Returns true upon success.\n",
    "syn.oth.get_root_callback": "Returns a function that can be used to call the original function in the context of a hook thread. Useful for when a function is hooked multiple times and the callback you receive from `syn.oth.hook` executes the next hook in the chain, not the original function.\n",
    "syn.oth.is_hook_thread": "Returns true if this thread is a hook thread.\n",
    "Drawing.new": "Instantiates a new [DrawEntry](../class/DrawEntry.md) object. Equivalent to `<Type>.new()`. Valid type names include:\n - [\"Line\"](../class/Line.md)\n - [\"Text\"](../class/Text.md)\n - [\"Image\"](../class/Image.md)\n - [\"Circle\"](../class/Circle.md)\n - [\"Square\"](../class/Square.md)\n - [\"Triangle\"](../class/Triangle.md)\n - [\"Quad\"](../class/Quad.md)\n",
    "DrawingImmediate.Line": "Draws a line.",
    "DrawingImmediate.Circle": "Draws a circle.",
    "DrawingImmediate.FilledCircle": "Draws a filled circle.",
    "DrawingImmediate.Triangle": "Draws a triangle.",
    "DrawingImmediate.FilledTriangle": "Draws a filled triangle.",
    "DrawingImmediate.Rectangle": "Draws a rectangle.",
    "DrawingImmediate.FilledRectangle": "Draws a filled rectangle.",
    "DrawingImmediate.Quad": "Draws a quad.",
    "DrawingImmediate.FilledQuad": "Draws a filled quad.",
    "DrawingImmediate.Text": "Draws text.",
    "DrawingImmediate.OutlinedText": "Draws outlined text.",
    "DrawingImmediate.GetPaint": "Returns an event that is fired every render step for a specific z-index. Lower value `z_index` events will fire before higher value events. `DrawingImmediate.*` APIs can only be called under these events.",
    "bit.badd": "Adds 2 or more integers.",
    "bit.bsub": "Subtracts 2 or more integers (from left to right).",
    "bit.bmul": "Multiplies 2 or more integers.",
    "bit.bdiv": "Divides 2 or more integers (from left to right).",
    "bit.band": "Performs bitwise AND on 2 or more integers.",
    "bit.bor": "Performs bitwise OR on 2 or more integers.",
    "bit.bxor": "Performs bitwise XOR on 2 or more integers.",
    "bit.bnot": "Performs bitwise NOT on an integer.",
    "bit.lshift": "Shifts `value` left by `n` bits.",
    "bit.rshift": "Shifts `value` right by `n` bits.",
    "bit.arshift": "Performs an arthimetic shift right on `value` by `n` bits.",
    "bit.rol": "Rotates `value` left `n` bits.",
    "bit.ror": "Rotates `value` right `n` bits.",
    "bit.bpopcount": "Returns the number of set bits in `value`.",
    "bit.bswap": "Inverts `value`'s endianness.",
    "bit.tohex": "Converts `value` to a hex string.",
    "bit.tobit": "Converts `value` into proper form for bitwise operations.",
    "debug.validlevel": "Checks if `level` is a valid index level for the current thread or `t` if passed.",
    "debug.getcallstack": "Returns a table with each index having fields for the `func` being executed at that call stack level, and the `currentline` if it is a Lua closure. Uses `t` instead of the callers thread if one is passed.",
    "debug.getprotos": "Returns a table containing the inner prototypes of function `f`. Use `debug.getproto` with `activated` set to `true` to get a list of closures.",
    "debug.getproto": "Gets the inner function of `f` at `index`.\n\n*Note*: If `activated` is true, it instead will return a table of functions. These are the closures of that proto that exist within the GC.\n",
    "debug.getstack": "Gets the method stack at level `index`. If `index` is not provided, a table is returned.",
    "debug.setstack": "Sets a stack value at `index` for function at `level` to `value`.",
    "debug.getupvalues": "Retrieve the upvalues in function `fi` or at level `fi`.",
    "debug.getupvalue": "Returns the upvalue with index `idx` in function or level `fi`.",
    "debug.setupvalue": "Sets an upvalue at index `idx` in function or level `fi`.",
    "debug.getconstants": "Retrieve the constants in function `fi` or at level `fi`.",
    "debug.getconstant": "Returns the constant at index `idx` in function `fi` or level `fi`.",
    "debug.setconstant": "Set constant `idx` to tuple `value` at level or function `fi`.",
    "debug.getmetatable": "Equivalent to [getrawmetatable.](/reference/category/table.md#getrawmetatable)",
    "debug.setmetatable": "Equivalent to [setrawmetatable.](/reference/category/table.md#setrawmetatable)",
    "debug.getregistry": "Equivalent to [getreg.](/reference/category/environment.md#getreg)"
}